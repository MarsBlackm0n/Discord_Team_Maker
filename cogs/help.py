# app/cogs/help.py
import discord
from discord import app_commands
from discord.ext import commands

# Contenu d'aide (texte statique, clair et maintenable)
HELP_SECTIONS = {
    "üß© Formation d'√©quipes": [
        {
            "name": "/team",
            "desc": (
                "Cr√©er des √©quipes **√©quilibr√©es** (par d√©faut) ou **al√©atoires** √† partir des joueurs "
                "du salon vocal de l'auteur (ou d'une liste de mentions). "
                "Options cl√©s : `mode`, `team_count`, `sizes`, `with_groups`, `avoid_pairs`, `members`, "
                "`create_voice`, `channel_ttl`, `auto_import_riot`."
            ),
            "examples": [
                "/team",
                "/team mode:random team_count:3",
                "/team sizes:\"3/3/2\" with_groups:\"@A @B | @C @D\" avoid_pairs:\"@X @Y\"",
                "/team members:\"@A @B @C @D @E @F\" create_voice:true channel_ttl:60",
            ],
        },
        {
            "name": "/disbandteams",
            "desc": "Supprime les **salons vocaux temporaires** cr√©√©s par `/team create_voice:true`.",
        },
    ],
    "üìä Ratings & LoL": [
        {
            "name": "/setskill",
            "desc": "Fixe un **rating** manuel pour un joueur. Exemple : `/setskill user:@Alice rating:1320`.",
        },
        {
            "name": "/setrank",
            "desc": (
                "D√©finit un **rang LoL (offline)** (sans cl√© Riot) et calcule le rating. "
                "Param√®tres : `tier` (Gold, Emerald‚Ä¶), `division` (I/II/III/IV, vide si Master+), `lp` (0‚Äì100)."
            ),
            "examples": ["/setrank user:@Alice tier:Emerald division:III lp:9"],
        },
        {
            "name": "/linklol",
            "desc": (
                "Lie un pseudo LoL et (si une **RIOT_API_KEY** est configur√©e) importe le rang **SoloQ** pour calculer le rating. "
                "R√©gions : `EUW, EUNE, NA, KR, BR, JP, LAN, LAS, OCE, TR, RU`."
            ),
        },
        {
            "name": "/ranks",
            "desc": (
                "Affiche les **ratings** stock√©s en BDD, avec le **rang LoL** (_Emerald III 9 LP_) s‚Äôil est connu. "
                "Options : `scope` (auto/voice/server), `sort` (rating_desc/rating_asc/name), `limit` (5‚Äì100)."
            ),
            "examples": ["/ranks", "/ranks scope:voice sort:name limit:50"],
        },
    ],
    "üõ°Ô∏è Admin / Owner": [
        {"name": "/whoami", "desc": "Affiche votre **User ID** (pratique pour `OWNER_ID`)."},
        {"name": "/resync", "desc": "Resynchronise les commandes (utile apr√®s un d√©ploiement)."},
        {"name": "/restart", "desc": "Red√©marre le bot (sur Railway, le process se coupe puis est relanc√© par la plateforme)."},
        {"name": "/shutdown", "desc": "Arr√™te le bot (owner/admin)."},
    ],
}

class HelpCog(commands.Cog):
    """Aide int√©gr√©e : /help avec aper√ßu global + recherche d‚Äôune commande."""

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="help", description="Afficher l'aide des commandes du bot.")
    @app_commands.describe(
        command="(Optionnel) Nom d'une commande pour l'aide d√©taill√©e",
        ephemeral="R√©pondre seulement √† vous (par d√©faut: true)"
    )
    async def help_cmd(
        self,
        inter: discord.Interaction,
        command: str | None = None,
        ephemeral: bool = True
    ):
        if command:
            # Recherche d'une commande par nom (case-insensitive)
            name = command.strip().lstrip("/").lower()
            for section, items in HELP_SECTIONS.items():
                for it in items:
                    if it["name"].lstrip("/").lower() == name:
                        emb = discord.Embed(
                            title=f"‚ùì Aide ‚Äî {it['name']}",
                            description=it["desc"],
                            color=discord.Color.blurple()
                        )
                        if "examples" in it and it["examples"]:
                            emb.add_field(
                                name="Exemples",
                                value="\n".join(f"`{ex}`" for ex in it["examples"]),
                                inline=False
                            )
                        await inter.response.send_message(embed=emb, ephemeral=ephemeral)
                        return
            # Non trouv√© : petite liste de suggestions
            all_names = ", ".join(f"`{i['name']}`" for sec in HELP_SECTIONS.values() for i in sec)
            await inter.response.send_message(
                f"‚ö†Ô∏è Commande inconnue : `{command}`.\nEssaye l'une de : {all_names}",
                ephemeral=True
            )
            return

        # Aide globale
        emb = discord.Embed(
            title="üìö Aide ‚Äî Team Builder Bot",
            description=(
                "Formez des √©quipes √©quilibr√©es, cr√©ez des salons vocaux et g√©rez les ratings/rangs LoL.\n"
                "‚Ä¢ Pour l‚Äôaide d‚Äôune commande pr√©cise : `/help command:team` (par ex.)"
            ),
            color=discord.Color.blurple()
        )
        for section, items in HELP_SECTIONS.items():
            lines = [f"‚Ä¢ **{it['name']}** ‚Äî {it['desc']}" for it in items]
            emb.add_field(name=section, value="\n".join(lines), inline=False)

        emb.set_footer(text="Astuce: utilisez /resync si les commandes n'apparaissent pas apr√®s un d√©ploiement.")
        await inter.response.send_message(embed=emb, ephemeral=ephemeral)

async def setup(bot: commands.Bot):
    await bot.add_cog(HelpCog(bot))
